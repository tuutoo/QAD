/* GUI CONVERTED from sasarp5a.p (converter v1.76) Thu Apr 25 23:26:57 2002 */
/* sasarp5a.p - SALES BY PART REPORT SUBROUTINE                             */
/* Copyright 1986-2002 QAD Inc., Carpinteria, CA, USA.                      */
/* All rights reserved worldwide.  This is an unpublished work.             */
/* $Revision: 1.8.1.6 $                                                         */
/*V8:ConvertMode=Report                                                     */
/* REVISION: 5.0      LAST MODIFIED: 06/20/89   BY: MLB *B130*              */
/* REVISION: 5.0      LAST MODIFIED: 12/08/89   BY: MLB *B434*              */
/* REVISION: 6.0      LAST MODIFIED: 06/14/90   BY: MLB *D038*              */
/* REVISION: 6.0      LAST MODIFIED: 10/25/90   BY: MLB *D141*              */
/* REVISION: 7.0      LAST MODIFIED: 04/17/92   BY: afs *F411*              */
/* REVISION: 7.3      LAST MODIFIED: 11/19/92   BY: jcd *G349*              */
/* REVISION: 7.3      LAST MODIFIED: 12/29/94   BY: rxm *F0C6*              */
/* REVISION: 8.6      LAST MODIFIED: 10/22/97   BY: ays *K14N*              */
/* REVISION: 8.6E     LAST MODIFIED: 02/23/98   BY: *L007* A. Rahane        */
/* REVISION: 8.6E     LAST MODIFIED: 04/07/98   BY: *L00M*  DS              */
/* REVISION: 8.6E     LAST MODIFIED: 06/19/98   BY: *L02V* Brenda Milton    */
/* REVISION: 9.1      LAST MODIFIED: 03/24/00   BY: *N08T* Annasaheb Rahane */
/* REVISION: 9.1      LAST MODIFIED: 04/28/00   BY: *N09M* Antony Babu      */
/* REVISION: 9.1      LAST MODIFIED: 08/12/00   BY: *N0KN* myb              */
/* REVISION: 9.1      LAST MODIFIED: 08/29/00   BY: *N0PM* Arul Victoria    */
/* Old ECO marker removed, but no ECO header exists *F0PN*                  */
/* Revision: 1.8.1.5  BY: Tiziana Giustozzi   DATE: 10/01/01  ECO: *N138*   */
/* $Revision: 1.8.1.6 $   BY: Seema Tyagi      DATE: 04/10/02  ECO: *N1FW*    */
/******************************************************************************/
/* All patch markers and commented out code have been removed from the source */
/* code below. For all future modifications to this file, any code which is   */
/* no longer required should be deleted and no in-line patch markers should   */
/* be added.  The ECO marker should only be included in the Revision History. */
/******************************************************************************/


/*GUI preprocessor directive settings */
&SCOPED-DEFINE PP_GUI_CONVERT_MODE REPORT

{mfdeclre.i}

/* EXTERNAL LABEL INCLUDE */
{gplabel.i}

/* ********** Begin Translatable Strings Definitions ********* */

&SCOPED-DEFINE sasarp5a_p_2 "Show Qty"
/* MaxLen: Comment: */

&SCOPED-DEFINE sasarp5a_p_5 "Show Margin %"
/* MaxLen: Comment: */

&SCOPED-DEFINE sasarp5a_p_6 "Show Sales"
/* MaxLen: Comment: */

&SCOPED-DEFINE sasarp5a_p_7 "Show Margin"
/* MaxLen: Comment: */

&SCOPED-DEFINE sasarp5a_p_9 "Summary/Detail"
/* MaxLen: Comment: */

/* ********** End Translatable Strings Definitions ********* */

{wbrp02.i}

define shared variable pl        like pt_prod_line.
define shared variable pl1       like pt_prod_line.
define shared variable part      like pt_part.
define shared variable part1     like pt_part.
define shared variable ptgroup   like pt_group.
define shared variable type      like pt_part_type.
define shared variable mon       as   integer format ">9".
define shared variable mon1      as   integer format ">9".
define shared variable yr1       like cph_year.
define shared variable yr        like cph_year.
define shared variable in_1000s  like mfc_logical.
define shared variable show_memo like mfc_logical.

define shared variable monhead  as   character format "x(8)" extent 12 no-undo.
define shared variable sum-yn        like mfc_logical format {&sasarp5a_p_9}
   initial yes.
define shared variable under         as   character format "X(8)" extent 12.
define shared variable disp_qty      like mfc_logical initial yes
   label {&sasarp5a_p_2}.
define shared variable disp_sales    like mfc_logical initial yes
   label {&sasarp5a_p_6}.
define shared variable disp_margin   like mfc_logical initial yes
   label {&sasarp5a_p_7}.
define shared variable disp_marg_per like mfc_logical initial yes
   label {&sasarp5a_p_5}.

define variable qty            as decimal format "->>>>>>9" extent 12 no-undo.
define variable sales          as decimal format "->>>>>>9" extent 12 no-undo.
define variable cost           as decimal format "->>>>>>9" extent 12 no-undo.
define variable margin         as decimal format "->>>>>>9" extent 12 no-undo.
define variable margin_per     as decimal format "->>>9.9%" extent 12 no-undo.

define variable tot_marg_per   as      decimal format "->>>9.9%".
define variable tot_plmarg_per like    tot_marg_per.
define variable pl_marg_per    like    margin_per.
define variable tot_qty as     decimal format "->>>,>>>,>>9".
define variable tot_sales      like    tot_qty.
define variable l_tot_cost     like    tot_qty no-undo.
define variable tot_margin     like    tot_qty.
define variable i              as      integer.

define variable pl_qty    as decimal format "->>>>>>9" extent 12  no-undo.
define variable pl_sales  as decimal format "->>>>>>9" extent 12  no-undo.
define variable l_pl_cost as decimal format "->>>>>>9" extent 12  no-undo.
define variable pl_margin as decimal format "->>>>>>9" extent 12  no-undo.

define variable tot_pl_qty     as   decimal format "->>>>>>>>>>9".
define variable tot_pl_sales   as   decimal format "->>>>>>>>>>9".
define variable l_tot_pl_cost  as   decimal format "->>>>>>>>>>9" no-undo.
define variable tot_pl_margin  as   decimal format "->>>>>>>>>>9".
define variable pl-desc        like pl_desc.
define variable rpt_qty        like qty.
define variable rpt_sales      like sales.
define variable l_rpt_cost     like cost                     no-undo.
define variable rpt_margin     like margin.
define variable rpt_marg_per   like margin_per.
define variable tot_rpt_qty    like tot_pl_qty.
define variable tot_rpt_sales  like tot_pl_sales.
define variable l_tot_rpt_cost like l_tot_pl_cost            no-undo.
define variable tot_rpt_margin like tot_pl_margin.
define variable tot_rpt_marper like tot_marg_per.
define variable desc1          like pt_desc1.
define variable desc2          like pt_desc2.
define variable um             like pt_um.
define variable c-sales        as   character format "x(32)" no-undo.

/* common euro variables */
{etvar.i  }

/* common euro report variables */
{etrpvar.i}

c-sales = getTermLabel("SALES_AND_MARGIN_IN_1000",31) + " ".

find first soc_ctrl  no-lock.

FORM /*GUI*/  header
   space (12)
   monhead
   caps(getTermLabelRt("TOTAL",9)) format "x(9)" skip space (10)
   under
   "-----------"  skip
with STREAM-IO /*GUI*/  frame hdr page-top width 132 no-box.

view frame hdr.

/* Clear report total variables */
assign
   tot_rpt_qty    = 0
   tot_rpt_sales  = 0
   l_tot_rpt_cost = 0
   tot_rpt_margin = 0
   tot_rpt_marper = 0
   rpt_qty        = 0
   rpt_sales      = 0
   l_rpt_cost     = 0
   rpt_margin     = 0
   rpt_marg_per   = 0.

FORM /*GUI*/  header
   c-sales
   base_curr no-label
with STREAM-IO /*GUI*/  frame footer page-bottom width 132.

if in_1000s
then
   view frame footer.

/* MAIN LOOP */
for each cph_hist
   where cph_part      >= part
   and   cph_part      <= part1
   and   cph_pl        >= pl
   and   cph_pl        <= pl1
   and   (cph_year     = yr
          or cph_year  = yr1)
   and   (cph_type     = ""
          or show_memo = yes)
   and   (can-find(pt_mstr where pt_part      = cph_part
                           and   pt_part_type = type)
                           or    type         = "")
   and   (can-find(pt_mstr where pt_part  = cph_part
                           and   pt_group = ptgroup)
                           or    ptgroup  = "")
   no-lock
   break by cph_pl
         by cph_part
   with frame b no-labels no-box width 132:


/*GUI*/ {mfguichk.i } /*Replace mfrpchk*/


   if cph_smonth <> soc_fysm
   then do:
      find msg_mstr where msg_nbr  = 116
                    and   msg_lang = global_user_lang no-lock no-error.

      if available msg_mstr
      then
         put
            caps(getTermLabelRtColon("ERROR", 9)) + " " + msg_desc
            format "x(74)" skip.
   end. /* IF cph_smonth <> soc_fysm */

   if first-of(cph_pl)
   then
      assign
         tot_pl_qty     = 0
         tot_pl_sales   = 0
         l_tot_pl_cost  = 0
         tot_pl_margin  = 0
         tot_plmarg_per = 0
         pl_qty         = 0
         pl_sales       = 0
         l_pl_cost      = 0
         pl_margin      = 0
         pl_marg_per    = 0.

   if first-of(cph_part)
   then
      /* CLEAR VARIABLES */
      assign
         tot_qty      = 0
         tot_sales    = 0
         l_tot_cost   = 0
         tot_margin   = 0
         tot_marg_per = 0
         qty          = 0
         sales        = 0
         margin       = 0
         margin_per   = 0
         cost         = 0.

   /* ACCUMULATES VALUES */
   if cph_year = yr
   then do i = 1 to (13 - mon):
      assign
         qty[i]   = qty[i]   + cph_qty[mon   + i - 1]
         sales[i] = sales[i] + cph_sales[mon + i - 1]
         cost[i]  = cost[i]  + cph_cost[mon  + i - 1].
   end.

   else if cph_year =  yr1
          and   yr  <> yr1
   then do i = (13 - mon1) to 12:
      assign
         qty[i]   = qty[i]   + cph_qty[i   - (12 - mon1)]
         sales[i] = sales[i] + cph_sales[i - (12 - mon1)]
         cost[i]  = cost[i]  + cph_cost[i  - (12 - mon1)].
   end.

   if last-of(cph_part)
   then do:
      do i = 1 to 12:
         if et_report_curr <> base_curr
         then do:
            {gprunp.i "mcpl" "p" "mc-curr-conv"
               "(input base_curr,
                 input et_report_curr,
                 input et_rate1,
                 input et_rate2,
                 input sales[i],
                 input true,   /* ROUND */
                 output sales[i],
                 output mc-error-number)"}
            if mc-error-number <> 0
            then do:
               {pxmsg.i &MSGNUM=mc-error-number &ERRORLEVEL=2}
            end.

            {gprunp.i "mcpl" "p" "mc-curr-conv"
               "(input base_curr,
                 input et_report_curr,
                 input et_rate1,
                 input et_rate2,
                 input cost[i],
                 input true,   /* ROUND */
                 output cost[i],
                 output mc-error-number)"}

            if mc-error-number <> 0
            then do:
               {pxmsg.i &MSGNUM=mc-error-number &ERRORLEVEL=2}
            end.

         end.  /* if et_report_curr <> base_curr */

      end.  /* do i = 1 to 12 */

      /* ROUND TO NEAREST 1000 IF NECESSARY*/
      if in_1000s
      then do:
         do i = 1 to 12:
            sales[i] = round(sales[i] / 1000,0).
            cost[i]  = round(cost[i]  / 1000,0).
         end.

      end.

      /* CALCULATE MARGINS */
      do i = 1 to 12:
         margin[i] = sales[i] - cost[i].
         if sales[i] = 0
         then
            margin_per[i] = 0.
         else
            margin_per[i] = (margin[i] / sales[i]) * 100.

         if    sales[i] < cost[i]
           and sales[i] < 0
         then
            margin_per[i] = margin_per[i] * -1.
      end.

      /* PRINT PART AND MONTHS */
      if page-size - line-counter < 5
      then
         page.

      view frame hdr.

      if sum-yn = no
      then do:
         find pt_mstr where pt_part = cph_part no-lock no-error no-wait.

         if available pt_mstr
         then
            assign
               desc1 = pt_desc1
               desc2 = pt_desc2
               um    = pt_um.

         else
            assign
               desc1 = ""
               desc2 = ""
               um    = "".

         put
            skip(1)
            cph_pl
            " "
            cph_part
            " "
            um
            " "
            desc1
            " "
            desc2
            skip.
      end.

      else if last-of(cph_pl)
      then do:
         find pl_mstr where pl_prod_line = cph_pl no-lock no-error.
         if available pl_mstr
         then
            pl-desc = pl_desc.

         put
            skip(1)
            cph_pl
            "  "
            pl-desc
            skip.
      end. /* ELSE IF LAST-OF(cph_pl) */

      /* TOTAL down - pl and rpt  */
      do i = 1 to 12:
         assign
            pl_qty[i]     = pl_qty[i]     + qty[i]
            pl_sales[i]   = pl_sales[i]   + sales[i]
            l_pl_cost[i]  = l_pl_cost[i]  + cost[i]
            pl_margin[i]  = pl_margin[i]  + margin[i]
            rpt_qty[i]    = rpt_qty[i]    + qty[i]
            rpt_sales[i]  = rpt_sales[i]  + sales[i]
            l_rpt_cost[i] = l_rpt_cost[i] + cost[i]
            rpt_margin[i] = rpt_margin[i] + margin[i].
      end.

      /* TOTAL across */
      do i = 1 to 12:
         assign
            tot_qty    = tot_qty    + qty[i]
            tot_sales  = tot_sales  + sales[i]
            l_tot_cost = l_tot_cost + cost[i]
            tot_margin = tot_margin + margin[i].
      end.

      /* Total across Marg% */
      if tot_sales = 0
      then
         tot_marg_per = 0.
      else
         tot_marg_per = (tot_margin / tot_sales) * 100.

      if    tot_sales < l_tot_cost
        and tot_sales < 0
      then
         tot_marg_per = tot_marg_per * -1.

      /*DISPLAY*/
      if disp_qty   = yes
         and sum-yn = no
      then
         display getTermLabelRtColon("QUANTITY",8) + "  "
            format "x(9)" qty tot_qty to 129
         with frame c no-box no-labels width 132 STREAM-IO /*GUI*/ .

      if disp_sales = yes
        and  sum-yn = no
      then
         display
            getTermLabelRtColon("SALES",8) + "  " format "x(9)"
            sales
            tot_sales to 129
         with frame d no-box no-labels width 132 STREAM-IO /*GUI*/ .

      if disp_margin = yes
        and sum-yn   = no
      then
         display
            getTermLabelRtColon("MARGIN",8) + "  " format "x(9)"
            margin
            tot_margin to 129
         with frame e no-box no-labels width 132 STREAM-IO /*GUI*/ .

      if disp_marg_per = yes
         and sum-yn    = no
      then
         display
            getTermLabelRtColon("MARGIN%",8) + "  " format "x(9)"
            margin_per
            tot_marg_per to 129
         with frame f no-box no-labels width 132 STREAM-IO /*GUI*/ .

      if last-of(cph_pl)
      then do:
         /* Total PL across */
         do i = 1 to 12:
            assign
               tot_pl_qty    = tot_pl_qty    + pl_qty[i]
               tot_pl_sales  = tot_pl_sales  + pl_sales[i]
               l_tot_pl_cost = l_tot_pl_cost + l_pl_cost[i]
               tot_pl_margin = tot_pl_margin + pl_margin[i].
         end.

         /* Total PL Marg% */
         do i = 1 to 12:
            if pl_sales[i] = 0
            then
               pl_marg_per[i] = 0.
            else
               pl_marg_per[i] = (pl_margin[i] / pl_sales[i]) * 100.

            if    pl_sales[i] < l_pl_cost[i]
              and pl_sales[i] < 0
            then
               pl_marg_per[i] = pl_marg_per[i] * -1.
         end.

         /* Total Total PL Marg% */
         if tot_pl_sales = 0
         then
            tot_plmarg_per = 0.
         else
            tot_plmarg_per = (tot_pl_margin / tot_pl_sales) * 100.

         if    tot_pl_sales < l_tot_pl_cost
           and tot_pl_sales < 0
         then
            tot_plmarg_per = tot_plmarg_per * -1.

         if page-size - line-counter < 6
         then
            page.

         if sum-yn = no
         then
            display
               "         " under "-----------" skip
            with frame g no-box no-labels width 132 STREAM-IO /*GUI*/ .

         display
            getTermLabel("PRODUCT_LINE",12) + " " format "x(13)"
            cph_pl
            " " + getTermLabel("TOTALS",12) + ": " format "x(15)"
            c-sales when (in_1000s) to 124
            et_report_curr to 129
            skip
         with frame x1 width 132 no-labels no-box STREAM-IO /*GUI*/ .

         if disp_qty = yes
         then
            display
               getTermLabelRtColon("QUANTITY",8) + " " format "x(9)"
               pl_qty
               tot_pl_qty to 129
            with frame h no-labels no-box width 132 STREAM-IO /*GUI*/ .

         if disp_sales = yes
         then
            display
               getTermLabelRtColon("SALES",8) + " " format "x(9)"
               pl_sales
               tot_pl_sales to 129
            with frame i no-labels no-box width 132 STREAM-IO /*GUI*/ .

         if disp_margin = yes
         then
            display
               getTermLabelRtColon("MARGIN",8) + " " format "x(9)"
               pl_margin
               tot_pl_margin to 129
            with frame j no-labels no-box width 132 STREAM-IO /*GUI*/ .

         if disp_marg_per = yes
         then
            display
               getTermLabelRtColon("MARGIN%",8) + " " format "x(9)"
               pl_marg_per
               tot_plmarg_per to 129
            with frame k no-labels no-box width 132 STREAM-IO /*GUI*/ .

      end. /*last-of cph_pl*/

   end. /*last-of cph_part*/

end.  /* for each cph_hist */

do i = 1 to 12:
   if rpt_sales[i] = 0
   then
      rpt_marg_per[i] = 0.
   else
      rpt_marg_per[i] = (rpt_margin[i] / rpt_sales[i]) * 100.

   if    rpt_sales[i] < l_rpt_cost[i]
     and rpt_sales[i] < 0
   then
      rpt_marg_per[i] = rpt_marg_per[i] * -1.
end.

do i = 1 to 12:
   assign
      tot_rpt_qty    = tot_rpt_qty    + rpt_qty[i]
      tot_rpt_sales  = tot_rpt_sales  + rpt_sales[i]
      l_tot_rpt_cost = l_tot_rpt_cost + l_rpt_cost[i]
      tot_rpt_margin = tot_rpt_margin + rpt_margin[i].
end.

if tot_rpt_sales = 0
then
   tot_rpt_marper = 0.
else
   tot_rpt_marper = (tot_rpt_margin / tot_rpt_sales) * 100.

if     tot_rpt_sales < l_tot_rpt_cost
   and tot_rpt_sales < 0
then
   tot_rpt_marper = tot_rpt_marper * -1.

/* DISPLAY RPT TOTALS */
if page-size - line-counter < 6
then
   page.

display
   "         " under "-----------" to 129
with frame p no-labels no-box width 132 STREAM-IO /*GUI*/ .

display
   getTermLabel("REPORT_TOTALS",17) + ": " format "x(19)"
   skip
   c-sales when (in_1000s) to 124
   et_report_curr to 129
with frame x2 width 132 no-labels no-box STREAM-IO /*GUI*/ .

if disp_qty = yes
then
   display
      getTermLabelRtColon("QUANTITY",8) + " " format "x(9)"
      rpt_qty
      tot_rpt_qty to 129
   with frame l no-labels no-box width 132 STREAM-IO /*GUI*/ .

if disp_sales = yes
then
   display
      getTermLabelRtColon("SALES",8) + " " format "x(9)"
      rpt_sales
      tot_rpt_sales to 129
   with frame m no-labels no-box width 132 STREAM-IO /*GUI*/ .

if disp_margin = yes
then
   display
      getTermLabelRtColon("MARGIN",8) + " " format "x(9)"
      rpt_margin
      tot_rpt_margin to 129
   with frame n no-labels no-box width 132 STREAM-IO /*GUI*/ .

if disp_marg_per = yes
then
   display
      getTermLabelRtColon("MARGIN%",8) + " " format "x(9)"
      rpt_marg_per
      tot_rpt_marper to 129
  with frame o no-labels no-box width 132 STREAM-IO /*GUI*/ .

put
   skip(1)
   mc-curr-label et_report_curr skip
   mc-exch-label mc-exch-line1 skip
   mc-exch-line2 at 22 skip(1).

hide frame hdr.
{wbrp04.i}
